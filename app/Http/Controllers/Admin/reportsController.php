<?php

namespace App\Http\Controllers\Admin;
use App\Mail\SendReport;
use App\Http\Controllers\Controller;
use App\Http\Requests\ReportRequest;
use App\Models\MainCategory;

use App\Models\Report;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Notification;
use Illuminate\Support\Facades\Mail;
use PDF;
use Route;
use DB;
use Illuminate\Support\Str;
class reportsController extends Controller
{


    public function index()
    {
        $reports = Report::selection()->paginate(PAGINATION_COUNT);
        return view('admin.report.index', compact('reports'));}
       // return response()->json(compact('reports'));}
    public function create()
    {
        return view('admin.report.create');  
    }

    public function store(ReportRequest $request)
    {
        try {


         
        
            $reports = Report::create([
               'report_number' => $request->report_number,
                'vendor_name' => $request->vendor_name,
                'report_date' => $request->report_Date,
              'vendor_email' => $request->vendor_email ,
               
                'row_sub_total' => $request->row_sub_total,

                'discount_type' => $request->discount_type,
                'discount_value' => $request->discount_value,
                'VAT_value' => $request->vat_value ,
                'shipping' => $request->shipping  ,
                'total_due' => $request->total_due,
               
               //في كل عملية حفظ نقوم بانقاص الكمية الاساسية 
               
            ]);
          
            $details_list = [];
            for ($i = 0; $i < count($request->product_name); $i++) {
                $details_list[$i]['product_name'] = $request->product_name[$i];
                $details_list[$i]['unite'] = $request->unite[$i];
                $details_list[$i]['quantity'] = $request->quantity[$i];
                $details_list[$i]['unite_price'] = $request->unite_price[$i];
                $details_list[$i]['sub_total'] = $request->sub_total[$i];
            }
    
            $details =  $reports->details()->createMany($details_list);
    
            if ($details) {
                
                return redirect()->route('admin.reports')->with(['success' => 'تم الحفظ بنجاح']);
              
            }
          //  return redirect()->route('admin.invoices')->with(['success' => 'تم الحفظ بنجاح']);

        } catch (\Exception $ex) {
            return $ex;
            return redirect()->route('admin.reports')->with(['error' => 'حدث خطا ما برجاء المحاوله لاحقا']);

        }
    }

    public function edit($id)
    {
        try {

            $report = Report::Selection()->find($id);
            if (! $report)
                return redirect()->route('admin.reports')->with(['error' => 'هذا الفاتورة غير موجود او ربما يكون محذوفا ']);

        return view('admin.report.edite', compact('report'));

        } catch (\Exception $exception) {

            return redirect()->route('admin.reports')->with(['error' => 'حدث خطا ما برجاء المحاوله لاحقا']);
        }

 


    }

    public function update($id,ReportRequest $request)
    {

        try {
            $report = Report::find($id);
            if (! $report) {
                return redirect()->route('admin.report.edit', $id)->with(['error' => 'هذه اللغة غير موجوده']);
            }


        

            $report->update($request->except('_token','id','product_name','sub_total','quantity','unite','unite_price'));

            $report->details()->delete();
            
         

            $details_list = [];
            for ($i = 1; $i < count($request->product_name); $i++) {
                $details_list[$i]['product_name'] = $request->product_name[$i];
                $details_list[$i]['unite'] = $request->unite[$i];
                $details_list[$i]['quantity'] = $request->quantity[$i];
                $details_list[$i]['unite_price'] = $request->unite_price[$i];
                $details_list[$i]['sub_total'] = $request->sub_total[$i];
            }
    
            $details = $report->details()->createMany($details_list);
    
            if ($details) {
                return redirect()->route('admin.reports')->with(['success' => 'تم تحديث اللغة بنجاح']);
            }

        } catch (\Exception $ex) {
            return $ex;
            return redirect()->route('admin.reports')->with(['error' => 'هناك خطا ما يرجي المحاوله فيما بعد']);
        }
    }
    public function destroy($id)
    {

        try {
            $reports = Report::find($id);
            if (!$reports)
                return redirect()->route('admin.reports')->with(['error' => ' الفاتورة غير موجود ']);

          

         
         // unlink($image); //delete from folder

         

            $reports->delete();
            return redirect()->route('admin.reports')->with(['success' => 'تم حذف الفاتورة بنجاح']);

        } catch (\Exception $ex) {
            return $ex;
            return redirect()->route('admin.reports')->with(['error' => 'حدث خطا ما برجاء المحاوله لاحقا']);
        }
    }



    public function show($id)
    {
        try {

            $report = Report::Selection()->find($id);
            if (!$report)
                return redirect()->route('admin.reports')->with(['error' => 'هذه الفاتورة غير موجود او ربما يكون محذوفا ']);

              
               
                 
              
        
        return view('admin.report.show
        ', compact('report'));

        } catch (\Exception $exception) {

            return redirect()->route('admin.reports')->with([$exception]);
        }

    }


    public function print($id)
    {
        
            $invoice = Invoice::whereId($id)->first();

            $data['invoice_id']         = $invoice->id;
            $data['invoice_date']       = $invoice->invoice_date;
            $data['customer']           = [
                __('customer_name')       => $invoice->customer_name,
                __('customer_mobile')     => $invoice->customer_mobile,
                __('customer_email')      => $invoice->customer_email
            ];
            $items = [];
            $invoice_details            =  $invoice->details()->get();
            foreach ($invoice_details as $item) {
                $items[] = [
                    'product_name'      => $item->product_name,
                    'unit'              => $item->unitText(),
                    'quantity'          => $item->quantity,
                    'unit_price'        => $item->unit_price,
                    'sub_total'     => $item->row_sub_total,
                ];
            }
            $data['items'] = $items;
    
            $data['invoice_number']     = $invoice->invoice_number;
            $data['created_at']         = $invoice->created_at->format('Y-m-d');
            $data['row_sub_total']          = $invoice->sub_total;
            $data['discount']           = $invoice->discountResult();
            $data['vat_value']          = $invoice->vat_value;
            $data['shipping']           = $invoice->shipping;
            $data['total_due']          = $invoice->total_due;
    
    
          //  $pdf = PDF::loadView('admin.invoice.pdf', $data);
    
            if (Route::currentRouteName() =='admin.invoices.print') {
              $print= view('admin.invoice.print', compact('invoice'));
              return $print;
            } 
           
         
    }




    public function pdf($id)
    {
        
            $invoice = Report::whereId($id)->first();

            $data['invoice_id']         = $invoice->id;
            $data['invoice_date']       = $invoice->invoice_date;
            $data['customer']           = [
                __('customer_name')       => $invoice->customer_name,
                __('customer_mobile')     => $invoice->customer_mobile,
                __('customer_email')      => $invoice->customer_email
            ];
            $items = [];
            $invoice_details            =  $invoice->details()->get();
            foreach ($invoice_details as $item) {
                $items[] = [
                    'product_name'      => $item->product_name,
                    'unit'              => $item->unitText(),
                    'quantity'          => $item->quantity,
                    'unit_price'        => $item->unit_price,
                    'sub_total'     => $item->row_sub_total,
                ];
            }
            $data['items'] = $items;
    
            $data['invoice_number']     = $invoice->invoice_number;
            $data['created_at']         = $invoice->created_at->format('Y-m-d');
            $data['row_sub_total']          = $invoice->sub_total;
            $data['discount']           = $invoice->discountResult();
            $data['vat_value']          = $invoice->vat_value;
            $data['shipping']           = $invoice->shipping;
            $data['total_due']          = $invoice->total_due;
    
    
          //  $pdf = PDF::loadView('admin.invoice.pdf', $data);
    
            if (Route::currentRouteName() =='admin.invoices.pdf') {
              $pdf= view('admin.invoice.pdf', compact('invoice'));
              return $pdf;
            } 
           
          /*  $invoice = Invoice::Selection()->find($id);
            if (!$invoice)
                return redirect()->route('admin.invoices')->with(['error' => 'هذه الفاتورة غير موجود او ربما يكون محذوفا ']);

              
               
                 
              
        
        return view('admin.invoice.pdf
        ', compact('invoice'));

        } catch (\Exception $exception) {

            return redirect()->route('admin.invoices')->with([$exception]);
        }*/
    }



    public function send_to_email($id)
    {

        $report = Report::whereId($id)->first();
    //    $this->pdf($id);

        Mail::to($report->vendor_email)->locale(config('app.locale'))->send(new SendReport($report));

        return redirect()->route('admin.reports') ->with([
            'message' => __('successfully'),
            'alert-type' => 'success'
        ]);   

        

    }



    }
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































